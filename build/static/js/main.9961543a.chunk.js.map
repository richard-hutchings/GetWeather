{"version":3,"sources":["Titles.js","Weather.js","form.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Weather","props","city","country","temperature","humidity","description","error","Form","onSubmit","getWeather","type","name","placeholder","API_KEY","App","state","undefined","_callee","e","API_CALL","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","src_Titles","src_form","this","src_Weather","React","Component","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAUeA,EAPA,kBACZC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BAAb,0DC6BYC,EA/BD,SAAAC,GAAK,OACjBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAERE,EAAMC,MAAQD,EAAME,SAAWP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YAC/BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAoCE,EAAMC,KAA1C,KAAoDD,EAAME,QAA1D,MAIAF,EAAMG,aAAeR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACrBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAoCE,EAAMG,YAA1C,MAIAH,EAAMI,UAAYT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACnBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAoCE,EAAMI,SAA1C,MAKCJ,EAAMK,aAAeV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,cACtBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAoCE,EAAMK,YAA1C,MAICL,EAAMM,OAASX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAC1BE,EAAMM,SClBJC,EARF,SAAAP,GAAK,OACZL,EAAAC,EAAAC,cAAA,QAAMW,SAAWR,EAAMS,YACrBd,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3CjB,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9CjB,EAAAC,EAAAC,cAAA,+BCAFgB,EAAU,mCAEVC,6MACFC,MAAQ,CACNZ,iBAAaa,EACbd,aAASc,EACTf,UAAMe,EACNZ,cAAUY,EACVX,iBAAaW,EACbV,WAAOU,KAERP,iDAAa,SAAAQ,EAAOC,GAAP,IAAAjB,EAAAC,EAAAiB,EAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAEQ,iBACIzB,EAAOiB,EAAES,OAAOC,SAAS3B,KAAK4B,MAC9B3B,EAAUgB,EAAES,OAAOC,SAAS1B,QAAQ2B,MAHjCN,EAAAE,KAAA,EAKcK,MAAK,oDAAAC,OAAsD9B,EAAtD,KAAA8B,OAA8D7B,EAA9D,WAAA6B,OAA+ElB,EAA/E,kBALnB,cAKHM,EALGI,EAAAS,KAAAT,EAAAE,KAAA,EAMUN,EAASc,OANnB,OAMHb,EANGG,EAAAS,KAOL/B,GAAQC,GACZgC,QAAQC,IAAIf,GACZgB,EAAKC,SAAU,CACblC,YAAaiB,EAAKkB,KAAKC,KACvBrC,QAASkB,EAAKoB,IAAItC,QAClBD,KAAMmB,EAAKT,KACXP,SAAUgB,EAAKkB,KAAKlC,SACpBC,YAAae,EAAKqB,QAAQ,GAAGpC,YAC7BC,MAAO,MAGZ8B,EAAKC,SAAU,CACblC,iBAAaa,EACbd,aAASc,EACTf,UAAMe,EACNZ,cAAUY,EACVX,iBAAaW,EACbV,MAAO,kCAxBG,yBAAAiB,EAAAmB,SAAAzB,oIA8Bd,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAC8C,EAAD,OAEJhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACfH,EAAAC,EAAAC,cAAC+C,EAAD,CAAMnC,WAAYoC,KAAKpC,aACvBd,EAAAC,EAAAC,cAACiD,EAAD,CACQ3C,YAAa0C,KAAK9B,MAAMZ,YACxBD,QAAS2C,KAAK9B,MAAMb,QACpBD,KAAM4C,KAAK9B,MAAMd,KACjBG,SAAUyC,KAAK9B,MAAMX,SACrBC,YAAawC,KAAK9B,MAAMV,YACxBC,MAAOuC,KAAK9B,MAAMT,qBAxDtByC,IAAMC,WAwETlC,IAEfmC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SCvE7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNT,IAASC,OAAOvD,EAAAC,EAAAC,cAAC8D,EAAD,MAASP,SAASC,eAAe,SDyH3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9961543a.chunk.js","sourcesContent":["import React from 'react'; \r\n /*import ReactDOM from 'react-dom';\r\n*/\r\nconst Titles = () => (\r\n   <div>\r\n     <h1 className='title-container__title'>Weather Finder</h1>\r\n     <p className='title-container__subheading'>Find out Temperature, weather conditions and more...</p>\r\n   </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n /* import ReactDOM from 'react-dom';\r\n*/\r\n\r\nconst Weather = props => (\r\n    <div className='weather__info'>\r\n       { \r\n           props.city && props.country && <p className='weather__key'>Location: \r\n           <span className='weather__value'> { props.city }, { props.country } </span> \r\n           </p> \r\n           }\r\n       { \r\n           props.temperature && <p className='weather__key'>Temperature: \r\n           <span className='weather__value'> { props.temperature } </span>\r\n           </p>\r\n           }\r\n       { \r\n           props.humidity && <p className='weather__key'>Humidity: \r\n          <span className='weather__value'> { props.humidity } </span> \r\n          </p>\r\n          }\r\n       \r\n       { \r\n           props.description && <p className='weather__key'>Conditions: \r\n          <span className='weather__value'> { props.description } </span> \r\n          </p>\r\n          }\r\n       { \r\n           props.error && <p className='weather__error'>\r\n           { props.error }  \r\n           </p>\r\n          }\r\n      </div>\r\n  );\r\n  \r\n  export default Weather;","import React from 'react';\r\n /* import ReactDOM from 'react-dom';\r\n*/\r\nconst Form = props => (\r\n      <form onSubmit={ props.getWeather } >\r\n        <input type='text' name='city' placeholder='City...'/>\r\n        <input type='text' name='country' placeholder='Country...' />\r\n        <button>Get Weather</button>\r\n      </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Titles from './Titles';\nimport Weather from './Weather';\nimport Form from './form';\n\nconst API_KEY = 'a7b206af4624fddd60d3e008b178801b';\n\nclass App extends React.Component {\n    state = {\n      temperature: undefined,\n      country: undefined,\n      city: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n    }\n     getWeather = async (e) => {\n         e.preventDefault();\n         const city = e.target.elements.city.value;\n         const country = e.target.elements.country.value;\n\n         const API_CALL = await fetch (`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n         const data = await API_CALL.json();\n         if (city && country) {\n         console.log(data);\n         this.setState ({\n           temperature: data.main.temp,\n           country: data.sys.country,\n           city: data.name,\n           humidity: data.main.humidity,\n           description: data.weather[0].description,\n           error: '',\n         });\n     } else {\n      this.setState ({\n        temperature: undefined,\n        country: undefined,\n        city: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter a City & Country',\n      });\n     }\n    }\n\n  render() {\n    return(\n      <div>\n        <div className='wrapper'>\n          <div className='main'>\n            <div className='container'>\n              <div className='row'>\n                <div className='col-xs-7 title-container'>\n                  <Titles />\n              </div>\n              <div className='col-xs-5 form-container'>\n              <Form getWeather={this.getWeather} />\n              <Weather \n                      temperature={this.state.temperature}\n                      country={this.state.country}\n                      city={this.state.city}\n                      humidity={this.state.humidity}\n                      description={this.state.description}\n                      error={this.state.error}\n                       />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n      \n    );\n  }\n \n}\n\n\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}